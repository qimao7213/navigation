// Generated by gencpp from file client_and_server/capture_global_path.msg
// DO NOT EDIT!


#ifndef CLIENT_AND_SERVER_MESSAGE_CAPTURE_GLOBAL_PATH_H
#define CLIENT_AND_SERVER_MESSAGE_CAPTURE_GLOBAL_PATH_H

#include <ros/service_traits.h>


#include <client_and_server/capture_global_pathRequest.h>
#include <client_and_server/capture_global_pathResponse.h>


namespace client_and_server
{

struct capture_global_path
{

typedef capture_global_pathRequest Request;
typedef capture_global_pathResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct capture_global_path
} // namespace client_and_server


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::client_and_server::capture_global_path > {
  static const char* value()
  {
    return "b6cc1eec0e09cd42154f0c63641fcdc8";
  }

  static const char* value(const ::client_and_server::capture_global_path&) { return value(); }
};

template<>
struct DataType< ::client_and_server::capture_global_path > {
  static const char* value()
  {
    return "client_and_server/capture_global_path";
  }

  static const char* value(const ::client_and_server::capture_global_path&) { return value(); }
};


// service_traits::MD5Sum< ::client_and_server::capture_global_pathRequest> should match
// service_traits::MD5Sum< ::client_and_server::capture_global_path >
template<>
struct MD5Sum< ::client_and_server::capture_global_pathRequest>
{
  static const char* value()
  {
    return MD5Sum< ::client_and_server::capture_global_path >::value();
  }
  static const char* value(const ::client_and_server::capture_global_pathRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::client_and_server::capture_global_pathRequest> should match
// service_traits::DataType< ::client_and_server::capture_global_path >
template<>
struct DataType< ::client_and_server::capture_global_pathRequest>
{
  static const char* value()
  {
    return DataType< ::client_and_server::capture_global_path >::value();
  }
  static const char* value(const ::client_and_server::capture_global_pathRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::client_and_server::capture_global_pathResponse> should match
// service_traits::MD5Sum< ::client_and_server::capture_global_path >
template<>
struct MD5Sum< ::client_and_server::capture_global_pathResponse>
{
  static const char* value()
  {
    return MD5Sum< ::client_and_server::capture_global_path >::value();
  }
  static const char* value(const ::client_and_server::capture_global_pathResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::client_and_server::capture_global_pathResponse> should match
// service_traits::DataType< ::client_and_server::capture_global_path >
template<>
struct DataType< ::client_and_server::capture_global_pathResponse>
{
  static const char* value()
  {
    return DataType< ::client_and_server::capture_global_path >::value();
  }
  static const char* value(const ::client_and_server::capture_global_pathResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // CLIENT_AND_SERVER_MESSAGE_CAPTURE_GLOBAL_PATH_H
